## bug detect effects
# cvlm_event_bug_detect_suzerain
# cvlm_event_bug_detect_subject

## journal - variable / list management effects
# cvlm_establish_culture_var_set
# cvlm_establish_culture_var_set_old [DEPRECIATED]
# cvlm_establish_religion_var_set
# cvlm_decolonization_culture_var_set
# cvlm_decolonization_religion_var_set

## journal - tolerance management effects
# cvlm_establish_tolerance_increase
# cvlm_establish_tolerance_decrease
# cvlm_establish_tolerance_decrease_violently

## new imperialism
# cvlm_new_imperialism_defy_effects
# cvlm_colonial_ambition_cleaner

## misc effects
# cvlm_journal_cleaner_effect
# cvlm_suzerain_recall_character_effect
# cvlm_establish_governor_appointment_effect
# cvlm_establish_lobby_set_effect
# cvlm_establish_pop_culture_convert_effect
# cvlm_establish_pop_religion_convert_effect
# cvlm_establish_devout_change_lobby_effect
# cvlm_establish_meticulous_missionary_effect

## dynamic tag / customize effects
# cvlm_create_dynamic_colony_effect
# cvlm_customize_name_cleaner_effect

cvlm_event_bug_detect_suzerain = {
    # check suzerain
    if = {
        limit = { NOT = { exists = scope:colonial_suzerain } }
        ROOT = {
            save_scope_as = colonial_suzerain
        }
    }
    else = {
        set_variable =  { name = colonial_government_bug_detect_var value = 0 }
    }
    # check subject - will try to find the correct one
    if = {
        limit = { NOT = { exists = scope:colonial_subject } }
        random_country = {
            limit = { 
                is_direct_subject_of = scope:colonial_suzerain 
                OR = {
                    has_modifier = cvlm_modifier_country_establish_subject
                    has_modifier = cvlm_modifier_country_reorganize_subject
                }
            }
            save_scope_as = colonial_subject
        }
        set_variable =  { name = colonial_government_bug_detect_var value = 0 }
    }
    # recheck subject - randomly pick one
    if = {
        limit = { NOT = { exists = scope:colonial_subject } }
        random_country = {
            limit = { NOT = { is_country_type = recognized } }
            save_scope_as = colonial_subject
        }
        set_variable =  { name = colonial_government_bug_detect_var value = 1 }
    }
}

cvlm_event_bug_detect_subject = {
    if = {
        limit = { NOT = { exists = scope:colonial_subject } }
        ROOT = {
            save_scope_as = colonial_subject
        }
    }
    else = {
        set_variable =  { name = colonial_government_bug_detect_var value = 0 }
    }
    if = {
        limit = {
        NOR = {
            exists = scope:colonial_suzerain
            exists = scope:colonial_suzerain_old
            }
        }
        random_country = {
            limit = { NOT = { is_country_type = unrecognized } }
            save_scope_as = colonial_suzerain
        }
        set_variable =  { name = colonial_government_bug_detect_var value = 1 }
    }
    else = {
        set_variable =  { name = colonial_government_bug_detect_var value = 0 }
    }
}


cvlm_establish_culture_var_set = {
    # return the first primary culture and a list of all primary culture(s)
    ## suzerain
    scope:colonial_suzerain = {
        ordered_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_suzerain }
            save_scope_as = colonial_suzerain_culture
        }
        every_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_suzerain }
            add_to_list = colonial_suzerain_culture_list
        }
    }
    ## subject
    scope:colonial_subject = {
        ordered_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_subject }
            save_scope_as = colonial_subject_culture
        }
        every_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_subject }
            add_to_list = colonial_subject_culture_list
        }
    }
}

cvlm_establish_culture_var_set_old = {
    # returns 3 suzerain culture, 3 subject culture
    ## suzerain
    scope:colonial_suzerain = {
        ordered_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_suzerain }
            save_scope_as = colonial_suzerain_culture_1

        }
        ordered_primary_culture = {
            limit = {
                is_primary_culture_of = scope:colonial_suzerain
                NOT = { this = scope:colonial_suzerain_culture_1 }
            }
            save_scope_as = colonial_suzerain_culture_2
        }
        ordered_primary_culture = {
            limit = {
                is_primary_culture_of = scope:colonial_suzerain
                NOR = {
                    this = scope:colonial_suzerain_culture_1
                    this = scope:colonial_suzerain_culture_2
                }
            }
            save_scope_as = colonial_suzerain_culture_3
        }
    }
    ## subject
    scope:colonial_subject = {
        ordered_primary_culture = {
            limit = {
                is_primary_culture_of = scope:colonial_subject
            }
            save_scope_as = colonial_subject_culture_1
        }
        ordered_primary_culture = {
            limit = {
                is_primary_culture_of = scope:colonial_subject
                NOT = { this = scope:colonial_subject_culture_1 }
            }
            save_scope_as = colonial_subject_culture_2
        }
        ordered_primary_culture = {
            limit = {
                NOR = {
                    is_primary_culture_of = scope:colonial_subject
                    this = scope:colonial_subject_culture_1
                    this = scope:colonial_subject_culture_2
                }
            }
            save_scope_as = colonial_subject_culture_3
        }
    }
}

cvlm_establish_religion_var_set = {
    scope:colonial_suzerain.religion = { save_scope_as = colonial_suzerain_religion }
    scope:colonial_subject.religion = { save_scope_as = colonial_subject_religion }
}

cvlm_decolonization_culture_var_set = {
    # return the first primary culture and a list of all primary culture(s)
    scope:colonial_suzerain_old = {
        ordered_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_suzerain_old }
            save_scope_as = colonial_suzerain_old_culture
        }
        every_primary_culture = {
            limit = { is_primary_culture_of = scope:colonial_suzerain_old }
            add_to_list = colonial_suzerain_old_culture_list
        }
    }
}

cvlm_decolonization_religion_var_set = {
    scope:colonial_suzerain_old.religion = { save_scope_as = colonial_suzerain_old_religion }
}

cvlm_establish_tolerance_increase = {
    custom_tooltip = {
        text = cvlm_establish_tooltip_tolerance_increase
        je:je_cvlm_establish = { 
            add_progress = { value = 20 name = cvlm_establish_tolerance_bar }
        }
    }
}

cvlm_establish_tolerance_decrease = {
    if = {
        limit = {
            has_game_rule = cvlm_flavoured_flatterer_on
            je:je_cvlm_establish = { scripted_bar_progress = { name = cvlm_establish_tolerance_bar value <= 20 } }
        }
        custom_tooltip = {
            text = cvlm_establish_tooltip_tolerance_decrease_warning
            je:je_cvlm_establish = {
                add_progress = { value = -20 name = cvlm_establish_tolerance_bar }
            }
        }
    }
    else = {
        custom_tooltip = {
            text = cvlm_establish_tooltip_tolerance_decrease
            je:je_cvlm_establish = {
                add_progress = { value = -20 name = cvlm_establish_tolerance_bar }
            }
        }
    }
}

cvlm_establish_tolerance_decrease_violently = {
    if = {
        limit = {
            has_game_rule = cvlm_flavoured_flatterer_on
            je:je_cvlm_establish = { scripted_bar_progress = { name = cvlm_establish_tolerance_bar value <= 40 } }
        }
        custom_tooltip = {
            text = cvlm_establish_tooltip_tolerance_decrease_violently_warning
            je:je_cvlm_establish = {
                add_progress = { value = -40 name = cvlm_establish_tolerance_bar }
            }
        }
    }
    else = {
        custom_tooltip = {
            text = cvlm_establish_tooltip_tolerance_decrease_violently
            je:je_cvlm_establish = {
                add_progress = { value = -40 name = cvlm_establish_tolerance_bar }
            }
        }
    }
}

cvlm_new_imperialism_defy_effects = {
    every_country = {
        limit = {
            NOT = { is_country_type = decentralized }
            NOT = { has_modifier = cvlm_modifier_ambition_defier }
        }
        # hostile: major powers with colonial affairs
        if = {
            limit = {
                AND = {
                    country_rank >= rank_value:major_power
                    OR = {
                        cvlm_has_colonial_ambition = yes
                        NOT = { has_law = law_type:law_no_colonial_affairs } 
                        any_subject_or_below = {
                            is_country_type = colonial
                        }
                    }
                }
            }
            # relations
            change_relations = {
                country = root
                value = -50
            }
            # pacts
            if = {
                limit = {
                    has_diplomatic_pact = {
                        who = root
                        type = alliance
                    }	
                }
				remove_diplomatic_pact = {
					country = root
					type = alliance
				}	
            }
            if = {
                limit = {
                    has_diplomatic_pact = {
                        who = root
                        type = defensive_pact
                    }	
                }
				remove_diplomatic_pact = {
					country = root
					type = defensive_pact
				}	
            }
            # lobbies
            if = {
                limit = {
                    any_political_lobby = {
                        is_political_lobby_type = lobby_pro_country
                        target = root
                    }
                }
                every_political_lobby = {
                    limit = {
                        is_political_lobby_type = lobby_pro_country
                        target = root
                    }
                    disband_political_lobby = yes
                }
            }
            # goals
            set_secret_goal = {
                country = root
                secret_goal = conquer
            }
        }
        # objection: other powers with colonial affairs
        else_if = {
            limit = {
                AND = {
                    NOT = { has_law = law_type:law_no_colonial_affairs }
                }
            }
            # relations
            change_relations = {
                country = root
                value = -30
            }
            # pacts
            if = {
                limit = {
                    has_diplomatic_pact = {
                        who = root
                        type = alliance
                    }	
                }
				remove_diplomatic_pact = {
					country = root
					type = alliance
				}	
            }
            if = {
                limit = {
                    has_diplomatic_pact = {
                        who = root
                        type = defensive_pact
                    }	
                }
				remove_diplomatic_pact = {
					country = root
					type = defensive_pact
				}	
            }
            # lobbies
            if = {
                limit = {
                    any_political_lobby = {
                        is_political_lobby_type = lobby_pro_country
                        target = root
                    }
                }
                every_political_lobby = {
                    limit = {
                        is_political_lobby_type = lobby_pro_country
                        target = root
                    }
                    disband_political_lobby = yes
                }
            }
            # goals
            set_secret_goal = {
                country = root
                secret_goal = antagonize
            }
        }
        # friendly: minor powers without colonial affairs
        else_if = {
            limit = {
                OR = {
                    country_rank <= rank_value:minor_power
                    is_country_type = unrecognized
                }
                has_law = law_type:law_no_colonial_affairs 
            }
            set_secret_goal = {
                country = root
                secret_goal = befriend
            }
        }
        # neutral: all the other
        else = {
            set_secret_goal = {
                country = root
                secret_goal = none
            }
        }
    }
}

cvlm_colonial_ambition_cleaner = {
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_global_order }
        remove_modifier = cvlm_modifier_ambition_global_order
    }
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_place_sun }
        remove_modifier = cvlm_modifier_ambition_place_sun
    }
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_bustling_marketplace }
        remove_modifier = cvlm_modifier_ambition_bustling_marketplace
    }
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_colonial_enlightment }
        remove_modifier = cvlm_modifier_ambition_colonial_enlightment
    }
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_one_true }
        remove_modifier = cvlm_modifier_ambition_one_true
    }
    if = {
        limit = { has_modifier = cvlm_modifier_ambition_defier }
        remove_modifier = cvlm_modifier_ambition_defier
    }
}

cvlm_journal_cleaner_effect = {
    scope:colonial_suzerain = {
        # from initialization
        if = {
            limit = { has_modifier = cvlm_modifier_country_establish_suzerain }
            remove_modifier = cvlm_modifier_country_establish_suzerain
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_reorganize_suzerain }
            remove_modifier = cvlm_modifier_country_reorganize_suzerain
        }
        # from events
        if = {
            limit = { has_modifier = cvlm_modifier_country_placate_resistence }
            remove_modifier = cvlm_modifier_country_placate_resistence
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_overseas_mission }
            remove_modifier = cvlm_modifier_country_overseas_mission
        }
        # from buttons
        if = {
            limit = { has_modifier = cvlm_modifier_country_support_liberal }
            remove_modifier = cvlm_modifier_country_support_liberal
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_control_comprador }
            remove_modifier = cvlm_modifier_country_control_comprador
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_reshape_identity }
            remove_modifier = cvlm_modifier_country_reshape_identity
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_manipulate_perception }
            remove_modifier = cvlm_modifier_country_manipulate_perception
        }
        # misc
        every_character = {
            limit = { has_modifier = cvlm_modifier_character_governor_candidate }
            remove_modifier = cvlm_modifier_character_governor_candidate
        }
    }
    scope:colonial_subject = {
        if = {
            limit = { has_modifier = cvlm_modifier_country_establish_subject }
            remove_modifier = cvlm_modifier_country_establish_subject
        }
        if = {
            limit = { has_modifier = cvlm_modifier_country_reorganize_subject }
            remove_modifier = cvlm_modifier_country_reorganize_subject
        }
        every_character = {
            limit = { has_modifier = cvlm_modifier_character_governor_candidate }
            remove_modifier = cvlm_modifier_character_governor_candidate
        }
    }
}

cvlm_suzerain_recall_character_effect = {
    if = {
        limit = { has_game_rule = cvlm_flavoured_flatterer_on }
        custom_tooltip = {
            text = cvlm_establish.100.recall.flatterer
            transfer_character = scope:colonial_suzerain
        }
    }
    else = {
        custom_tooltip = {
            text = cvlm_establish.100.recall
            transfer_character = scope:colonial_suzerain
        }
    }
}

cvlm_establish_governor_appointment_effect = {
    # scope:colonial_subject
    if = {
        limit = { root = { exists = var:cvlm_establish_option_governor_var } }
        # manual
        if = {
            limit = { root = { var:cvlm_establish_option_governor_var = 1 } }
            scope:colonial_suzerain = {
                # if no character has been selected within time, create a character with the modifier
                if = {
                    limit = { NOT = { any_scope_character = { has_modifier = cvlm_modifier_character_governor_candidate } } }
                    ordered_interest_group = {
                        limit = { is_in_government = yes }
                        order_by = ig_clout
                        save_scope_as = colonial_suzerain_ig
                    }
                    create_character = {
                        interest_group = scope:colonial_suzerain_ig
                        on_created = { add_modifier = cvlm_modifier_character_governor_candidate }
                    }
                }
                # transfer the Governor 
                random_scope_character = {
                    limit = { has_modifier = cvlm_modifier_character_governor_candidate }
                    if = {
                        limit = { NOT = { has_role = politician } }
                        add_character_role = politician
                    }
                    transfer_character = scope:colonial_subject
                    set_character_as_ruler = yes
                    set_as_interest_group_leader = yes
                }
            }
        }

        # noble
        else_if = {
            limit = { root = { var:cvlm_establish_option_governor_var = -1 } }
            # if any character has been selected via possible flavor events 
            if = {
                limit = { scope:colonial_subject = { any_scope_character = { has_modifier = cvlm_modifier_character_governor_candidate } } }
                scope:colonial_subject = {
                    random_scope_character = {
                        limit = { has_modifier = cvlm_modifier_character_governor_candidate }
                        set_character_as_ruler = yes
                    }
                }
            }
            # else generate a character
            else = {
                scope:colonial_suzerain = {
                    random_interest_group = {
                        limit = {
                            OR = {
                                is_interest_group_type = ig_landowners
                                is_interest_group_type = ig_armed_forces
                                is_interest_group_type = ig_petty_bourgeoisie
                            }
                        }
                        save_scope_as = cvlm_modifier_character_governor_candidate_ig
                    }
                    create_character = {
                        noble = yes
                        interest_group = scope:cvlm_modifier_character_governor_candidate_ig
                        on_created = { add_modifier = cvlm_modifier_character_governor_candidate }
                    }
                    random_scope_character = {
                        limit = { has_modifier = cvlm_modifier_character_governor_candidate }
                        add_character_role = politician
                        transfer_character = scope:colonial_subject
                        set_character_as_ruler = yes
                        set_as_interest_group_leader = yes
                    }
                }
            }
        }

        # local
        else_if = {
            limit = { root = { var:cvlm_establish_option_governor_var = -2 } }
            if = {
                limit = { scope:colonial_subject = { any_scope_character = { has_modifier = cvlm_modifier_character_governor_candidate } } }
                scope:colonial_subject = {
                    random_scope_character = {
                        limit = { has_modifier = cvlm_modifier_character_governor_candidate }
                        set_character_as_ruler = yes
                    }
                }
            }
            else = {
                scope:colonial_subject = {
                    random_interest_group = {
                        limit = {
                            OR = {
                                is_interest_group_type = ig_intelligentsia
                                is_interest_group_type = ig_industrialists
                                is_interest_group_type = ig_petty_bourgeoisie
                            }
                        }
                        save_scope_as = cvlm_modifier_character_governor_candidate_ig
                    }
                    create_character = {
                        noble = no
                        culture = scope:colonial_subject_culture
                        interest_group = scope:cvlm_modifier_character_governor_candidate_ig
                        on_created = {
                            add_character_role = politician
                            set_character_as_ruler = yes
                            set_as_interest_group_leader = yes
                        }
                    }
                }
            }
        }
        
        # additional steps: replace modifiers, put their ig in governmennt, remove hostile igs from government
        scope:colonial_subject = {
            ruler = {
                remove_modifier = cvlm_modifier_character_governor_candidate
                add_modifier = cvlm_modifier_character_governor_candidate_mark
                interest_group = { add_ruling_interest_group = yes }
            }
            every_political_lobby = {
                limit = {
                    OR = {
                        is_political_lobby_type = lobby_anti_country
                        is_political_lobby_type = lobby_anti_overlord
                    }
                    target = scope:colonial_suzerain
                }
                every_lobby_member = {
                    limit = {
                        NOT = { this = scope:colonial_subject.ruler.interest_group }
                    }
                    remove_ruling_interest_group = yes
                }
            }
        }
    }
}

cvlm_establish_lobby_set_effect = {
    # the game is likely to crush without the journal, always requiring it to run 
    if = {
        limit = { has_journal_entry = je_cvlm_establish }
        # judge which ig should be the anti member
        if = {
            # if any option from cvlm_establish.10 is picked
            limit = { NOT = { var:cvlm_establish_option_monarchy_var = 0 } }
            if = {
                # if abolish monarchy, landowners would be mad
                limit = {
                    var:cvlm_establish_option_monarchy_var = -1
                }
                scope:colonial_subject = { 
                    ig:ig_landowners = { save_scope_as = anti_overlord_ig }
                }
                
            }
            else_if = {
                # if preserve monarchy, intelligentsia would be mad
                limit = {
                    OR = {
                        var:cvlm_establish_option_monarchy_var = 1
                        var:cvlm_establish_option_monarchy_var = 2
                    }
                }
                scope:colonial_subject = { 
                    ig:ig_intelligentsia = { save_scope_as = anti_overlord_ig }
                }
            }
        }
        else = {
            scope:colonial_subject = {
                # otherwise, the most powerful one among the two would be mad
                ordered_interest_group = {
                    limit = { 
                        OR = {
                            is_interest_group_type = ig_landowners
                            is_interest_group_type = ig_intelligentsia
                        }
                    }
                    order_by = ig_clout
                    save_scope_as = anti_overlord_ig
                }
            }
        }
        # while the left ig always becomes the pro member
        scope:colonial_subject = {
            random_interest_group = {
                limit = { 
                    OR = {
                        is_interest_group_type = ig_landowners
                        is_interest_group_type = ig_intelligentsia
                    }
                    NOT =  { this = scope:anti_overlord_ig }
                }
                save_scope_as = pro_overlord_ig
            }
        }

        # check if any anti-overlord lobby already existed
        scope:colonial_subject = {
            if = {
                limit = {
                    any_political_lobby = {
                        OR = {
                            is_political_lobby_type = lobby_anti_overlord
                            is_political_lobby_type = lobby_anti_country
                        }
                        target = { scope:colonial_suzerain ?= THIS }
                    }	
                }
                # if did, mark it 
                random_political_lobby = {
                    limit = {
                        OR = {
                            is_political_lobby_type = lobby_anti_overlord
                            is_political_lobby_type = lobby_anti_country
                        }
                        target = { scope:colonial_suzerain ?= THIS }
                    }
                    save_scope_as = anti_overlord_lobby
                }
                # add anti member, make sure to kick out the pro member
                scope:anti_overlord_lobby = {
                    if = {
                        limit = { NOT = { any_lobby_member = { this = scope:anti_overlord_ig } } }
                        add_lobby_member = scope:anti_overlord_ig
                    }
                    if = {
                        limit = { any_lobby_member = { this = scope:pro_overlord_ig } }
                        remove_lobby_member = scope:pro_overlord_ig
                    }
                }
            }
            # otherwise, create it
            else = {
                create_political_lobby = {  
                    type = lobby_anti_overlord 
                    target = scope:colonial_suzerain
                    lobby_formation_reason = aggression
                    add_interest_group = scope:anti_overlord_ig
                }
                random_political_lobby = {
                    limit = {
                        is_political_lobby_type = lobby_anti_overlord
                        target = scope:colonial_suzerain
                    }
                    save_scope_as = anti_overlord_lobby
                }
            }
        }

        # check if any pro-overlord lobby already existed
        scope:colonial_subject = {
            if = {
                limit = {
                    any_political_lobby = {
                        OR = {
                            is_political_lobby_type = lobby_pro_overlord
                            is_political_lobby_type = lobby_pro_country
                        }
                        target = { scope:colonial_suzerain ?= THIS }
                    }	
                }
                # if did, mark it...
                random_political_lobby = {
                    limit = {
                        OR = {
                            is_political_lobby_type = lobby_pro_overlord
                            is_political_lobby_type = lobby_pro_country
                        }
                        target = { scope:colonial_suzerain ?= THIS }
                    }
                    save_scope_as = pro_overlord_lobby
                }
                # add pro member, make sure to kick out the anti member
                scope:pro_overlord_lobby = {
                    if = {
                        limit = { NOT = { any_lobby_member = { this = scope:pro_overlord_ig } } }
                        add_lobby_member = scope:pro_overlord_ig
                    }
                    if = {
                        limit = { any_lobby_member = { this = scope:anti_overlord_ig } }
                        remove_lobby_member = scope:anti_overlord_ig
                    }
                }
            }
            # otherwise, create it
            else = {
                create_political_lobby = {  
                    type = lobby_pro_overlord 
                    target = scope:colonial_suzerain
                    lobby_formation_reason = diplomacy
                    add_interest_group = scope:pro_overlord_ig
                }
                random_political_lobby = {
                    limit = {
                        is_political_lobby_type = lobby_pro_overlord
                        target = scope:colonial_suzerain
                    }
                    save_scope_as = pro_overlord_lobby
                }
            }
        }
    }
}

cvlm_establish_pop_culture_convert_effect = {
    hidden_effect = {
        random_scope_state = {
            limit = {
                owner = scope:colonial_subject
                is_capital = yes
            }
            every_scope_pop = {
                limit = {
                    pop_has_primary_culture = yes
                }
                change_pop_culture = {
                    value = 0.001
                    target = scope:colonial_suzerain_culture
                }
            }
        }
    }
}

cvlm_establish_pop_religion_convert_effect = {
    hidden_effect = {
        random_scope_state = {
            limit = {
                owner = scope:colonial_subject
                is_capital = yes
            }
			convert_population = {
				target = scope:colonial_suzerain_religion
				value = 0.05
			}
        }
        every_scope_state = {
            limit = {
                owner = scope:colonial_subject
                is_incorporated = yes
                NOT = { is_capital = yes }
            }
			convert_population = {
				target = scope:colonial_suzerain_religion
				value = 0.01
			}
        }
    }
}

cvlm_establish_devout_change_lobby_effect = {
    scope:colonial_subject = {
        cvlm_establish_lobby_set_effect = yes
        random_political_lobby = {
            limit = {
                OR = {
                    is_political_lobby_type = lobby_pro_overlord
                    is_political_lobby_type = lobby_pro_country
                }
                target = { scope:colonial_suzerain ?= THIS }
            }
            save_temporary_scope_as = pro_overlord_lobby
        }
        random_political_lobby = {
            limit = {
                OR = {
                    is_political_lobby_type = lobby_anti_overlord
                    is_political_lobby_type = lobby_anti_country
                }
                target = { scope:colonial_suzerain ?= THIS }
            }
            save_temporary_scope_as = anti_overlord_lobby
        }
    }
    if = {
        limit = { root = { var:cvlm_establish_option_religion_var = 2 } }
        scope:anti_overlord_lobby = {
            if = {
                limit = { any_lobby_member = { is_interest_group_type = ig_devout } } 
                remove_lobby_member = prev
            }
        }
        scope:pro_overlord_lobby = {
            if = {
                limit = { NOT = { any_lobby_member = { is_interest_group_type = ig_devout } } }
                add_lobby_member = prev
            }
        }
    }
    else_if = {
        limit = { root = { var:cvlm_establish_option_religion_var = 1 } }
        scope:anti_overlord_lobby = {
            if = {
                limit = { any_lobby_member = { is_interest_group_type = ig_devout } }
                remove_lobby_member = prev
            }
        }
    }
}

cvlm_establish_meticulous_missionary_effect = {
    
    # change subject devout ig name
    if = {
        limit = {
            OR = {
                has_game_rule = cvlm_meticulous_missionary_on
                has_game_rule = cvlm_meticulous_missionary_name
            }
        }
        ## by religion
        switch = {
            trigger = scope:colonial_suzerain.religion
            # christian
            rel:catholic = { set_interest_group_name = ig_catholic_church }
            rel:protestant = { set_interest_group_name = ig_evangelical_church }
            rel:orthodox = { set_interest_group_name = ig_orthodox_church }
            rel:oriental_orthodox = { set_interest_group_name = ig_oriental_orthodox_church }
            # islam
            rel:sunni = { set_interest_group_name = ig_sunni_madrasahs }
            rel:shiite = { set_interest_group_name = ig_shia_madrasahs }
            # oriental
            rel:confucian = { set_interest_group_name = ig_confucian }
            rel:shinto = { set_interest_group_name = ig_shinto_monks }
            rel:mahayana = { set_interest_group_name = ig_mahayana_monks }
            rel:gelugpa = { set_interest_group_name = ig_vajrayana_monks }
            rel:theravada = { set_interest_group_name = ig_theravada_monks }
            rel:hindu = { set_interest_group_name = ig_hindu_priesthood }
            rel:sikh = { set_interest_group_name = ig_sikh_priesthood }
            # misc
            rel:jewish = { set_interest_group_name = ig_rabbinical_council }
        }
        ## country-specific - yes, we just change the name again
        switch = {
            trigger = scope:colonial_suzerain.country_definition
            # western
            cd:PAP = { set_interest_group_name = ig_roman_curia }
            cd:GBR = { set_interest_group_name = ig_anglican_church }
            cd:USA = { set_interest_group_name = ig_evangelicals }
            cd:SWE = { set_interest_group_name = ig_church_of_sweden }
            cd:NOR = { set_interest_group_name = ig_church_of_norway }
            cd:DEN = { set_interest_group_name = ig_church_of_denmark }
            cd:FIN = { set_interest_group_name = ig_church_of_finland }
            # asia
            cd:CHI = { set_interest_group_name = ig_confucian }
            cd:TPG = { set_interest_group_name = ig_taiping_god_worshippers }
        }
    }

    # change subject devout trait
    if = {
        limit = { has_game_rule = cvlm_meticulous_missionary_on }

        # guarantee all basic traits
        add_ideology = ideology_pious
        add_ideology = ideology_moralist
        add_ideology = ideology_patriarchal

        # remove subject special devout traits
        ## usual
        remove_ideology = ideology_orthodox_patriarch
        remove_ideology = ideology_oriental_orthodox_patriarch
        remove_ideology = ideology_shinto_moralist
        remove_ideology = ideology_buddhist_moralist
        remove_ideology = ideology_hindu_moralist
        remove_ideology = ideology_sikh_moralist
        remove_ideology = ideology_confucian
        ## country-specific
        remove_ideology = ideology_heavenly_kingdom_theocratic
        remove_ideology = ideology_russian_patriarch

        # apply religion-specific traits
        switch = {
            trigger = scope:colonial_suzerain_religion
            # christian
            rel:orthodox = {
                add_ideology = ideology_orthodox_patriarch
                remove_ideology = ideology_patriarchal
            }
            rel:oriental_orthodox = {
                add_ideology = ideology_oriental_orthodox_patriarch
                remove_ideology = ideology_patriarchal
            }
            # oriental
            rel:confucian = {
                add_ideology = ideology_confucian 
                remove_ideology = ideology_moralist
                remove_ideology = ideology_pious
            }
            rel:shinto = {
                add_ideology = ideology_shinto_moralist
                remove_ideology = ideology_moralist
            }
            rel:mahayana = {
                add_ideology = ideology_buddhist_moralist
                remove_ideology = ideology_moralist
            }
            rel:gelugpa = {
                add_ideology = ideology_buddhist_moralist
                remove_ideology = ideology_moralist
            }
            rel:theravada = {
                add_ideology = ideology_buddhist_moralist
                remove_ideology = ideology_moralist
            }
            rel:hindu = {
                add_ideology = ideology_hindu_moralist
                remove_ideology = ideology_moralist
            }
            rel:sikh = {
                add_ideology = ideology_sikh_moralist
                remove_ideology = ideology_moralist
            }
        }

        # apply country-specific traits
        switch = {
            trigger = scope:colonial_suzerain.country_definition
            cd:TPG = {
                if = {
                    limit = { scope:colonial_suzerain = { ig:ig_devout = { has_ideology = ideology:ideology_heavenly_kingdom_theocratic } } }
                    add_ideology = ideology_heavenly_kingdom_theocratic
                    remove_ideology = ideology_moralist
                }
            }
            cd:RUS = {
                if = {
                    limit = { scope:colonial_suzerain = { ig:ig_devout = { has_ideology = ideology:ideology_russian_patriarch } } }
                    add_ideology = ideology_russian_patriarch
                    remove_ideology = ideology_orthodox_patriarch
                }
            }
        }
    }
}

# cvlm_create_dynamic_colony_effect = {
#     random_scope_state = {
#         limit = { has_decree = cvlm_establish_degree }
#         save_temporary_scope_as = newly_formed_colonial_nation_capital_scope
#     }
#     create_dynamic_country = {
#         origin = root
#         country_type = colonial
#         tier = principality
#         capital = scope:newly_formed_colonial_nation_capital_scope
#         on_created = { 
#             set_variable = cvlm_colonial_government_var
#             set_country_type = colonial
#             activate_law = law_type:law_frontier_colonization
#             activate_law = law_type:law_presidential_republic
#         }
#     }
#     hidden_effect = {
#         create_diplomatic_pact = {
#             country = scope:newly_formed_colonial_nation_capital_scope.owner
#             type = puppet
#         }
#     }
# }

# cvlm_customize_name_cleaner_effect = {
#     remove_variable = cvlm_customize_name_city
#     remove_variable = cvlm_customize_name_state
#     remove_variable = cvlm_customize_name_region
# }